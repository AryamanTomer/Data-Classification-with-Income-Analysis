# -*- coding: utf-8 -*-
"""Data Classification with Income Analysis.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1veEqUoqk5UCGVlqGU1F2tXhennHti9Sv
"""

import pandas as pd
import numpy as np

data = pd.read_csv("Videodata.csv")

data.head()

data.shape

print("The row count of the data is {}".format(data.shape[0]))

data.columns

data.iloc[data["age"].idxmax()]

data.iloc[data["age"].idxmin()]

data[" workclass"].value_counts().sort_values(ascending=False)

data[" income"].value_counts().sort_values(ascending=True)

import matplotlib
matplotlib.rc("figure",figsize=(20,10))

import matplotlib.pyplot as plt
data[" income"].value_counts().plot.bar()
plt.title("Income Level Counts")
plt.show()

data[" education"].value_counts()

data[" education"].value_counts().plot(kind = "bar")
plt.title("Education Level Counts")
plt.show()

data.columns

sexlabels = data[" sex"].unique()
plt.pie(data[" sex"].value_counts(),labels=sexlabels)
plt.show()

maritalstatuslabels = data[" marital-status"].unique()
plt.pie(data[" marital-status"].value_counts(),labels=maritalstatuslabels)
plt.show()

data.columns

data = data[["age"," workclass", " education", " marital-status", " occupation", " hours-per-week", " native-country", " income"]]
data.columns = [["age","workclass", "education", "marital-status", "occupation", "hours-per-week", "native-country", "income"]]

data.head()

data.isna().sum()

data.duplicated().sum()

data.drop_duplicates(inplace=True)

data.duplicated().sum()

data.head()

from sklearn.preprocessing import LabelEncoder
labelencoder = LabelEncoder()

data["workclass"].head()

data["workclass"] = labelencoder.fit_transform(data["workclass"])

data["workclass"].head()

data["education"] = labelencoder.fit_transform(data["education"])
data["marital-status"] = labelencoder.fit_transform(data["marital-status"])
data["occupation"] = labelencoder.fit_transform(data["occupation"])
data["native-country"] = labelencoder.fit_transform(data["native-country"])
data["income"] = labelencoder.fit_transform(data["income"])

data.head()

import seaborn as sns
sns.heatmap(data=data.corr(),annot=True)

X = data[["age", "workclass", "education", "marital-status", "occupation", "hours-per-week", "native-country"]]
y = data[["income"]]

from sklearn.model_selection import train_test_split
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.3)

from sklearn.preprocessing import StandardScaler
scaler = StandardScaler()
scaled_X_train = scaler.fit_transform(X_train)
scaled_X_test = scaler.fit_transform(X_test)

from sklearn.metrics import accuracy_score
def modelresults(predictions):
  print(f"Accuracy score of the model is {accuracy_score(y_test, predictions)}.")

from sklearn.linear_model import LogisticRegression
log_model = LogisticRegression()
log_model.fit(scaled_X_train, y_train)

log_predictions = log_model.predict(scaled_X_test)
modelresults(log_predictions)

from sklearn.neighbors import KNeighborsClassifier
from sklearn.model_selection import GridSearchCV
from sklearn.pipeline import Pipeline
knn = KNeighborsClassifier()
k_values = list(range(1, 30))
pipe = Pipeline(steps = [('knn', knn)])
param_grid = {"knn__n_neighbors":k_values}
cv_classifier = GridSearchCV(pipe, param_grid, cv=5, scoring="accuracy")
cv_classifier.fit(scaled_X_train, y_train)

pred_gridknn = cv_classifier.predict(scaled_X_test)
modelresults(pred_gridknn)

from sklearn.svm import SVC
svm = SVC()
param_grid_svr = {"C":[0.1, 0.5, 1], "kernel":["linear", "rbf", "poly"]}
gridsvr = GridSearchCV(svm, param_grid_svr)
gridsvr.fit(scaled_X_train, y_train)

pred_svr = gridsvr.predict(scaled_X_test)
modelresults(pred_svr)

from sklearn.ensemble import RandomForestClassifier
rfr_model = RandomForestClassifier()
n_estimators = [32, 64, 128]
max_features = [2, 3, 4, 5]
bootstrap = [True, False]
oob_score = [True, False]
param_grid_rfr = {"n_estimators":n_estimators, "max_features":max_features, "bootstrap":bootstrap, "oob_score":oob_score}
gridrfr = GridSearchCV(rfr_model, param_grid_rfr)
gridrfr.fit(scaled_X_train, y_train)

predsrfc = gridrfr.predict(scaled_X_test)
modelresults(predsrfc)

columniterate = 1
for index in X.columns:
  mean = data[index].mean()
  print("The mean of the column {} is {}".format(columniterate, mean))
  columniterate += 1

def prediction(newentry):
  pred = cv_classifier.predict(newentry.reshape(1, -1))
  if pred == 0:
    return "Below or equal to 50K"
  else:
    return "More than 50K"

new_index = np.array([[40, 3, 10, 2, 6, 40, 36]])
print("Income prediction of the new index is : {}".format(prediction(new_index)))